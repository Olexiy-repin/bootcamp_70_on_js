/*
? –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º
?
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é filterRange(numbers, a, b), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ numbers, 
? —à—É–∫–∞—î –≤ –Ω—å–æ–º—É –µ–ª–µ–º–µ–Ω—Ç–∏ –±—ñ–ª—å—à—ñ-—Ä—ñ–≤–Ω—ñ min —Ç–∞ –º–µ–Ω—à—ñ-—Ä—ñ–≤–Ω—ñ max —ñ –≤—ñ–¥–¥–∞—î –º–∞—Å–∏–≤ —Ü–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
*/

// –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const filterRange = (numbers, min, max) => {
//   return numbers.filter((el, idx, arr) => {
//     return el >= min && el <= max;
//   });
// };

// console.log([10, 20, 2, 3, 56, 4]);
// console.log(filterRange([10, 20, 2, 3, 56, 4], 3, 10));

// –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const filterRange = (numbers, min, max) => {
//   return numbers.filter(num => num >= min && num <= max);
// };

// console.log([10, 20, 2, 3, 56, 4]);
// console.log(filterRange([10, 20, 2, 3, 56, 4], 3, 10));

//? –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–π—Ç–µ –º–∞—Å–∏–≤ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.

// 1 –í–∞—Ä—ñ–∞–Ω—Ç forEach() —Ç–∞ includes
// const users = ['Andre', 'Lester', 'Andre', 'Lester', 'Louisa', 'Alex'];
// const filtredUsers = [];

// users.forEach(username => {
//   if (!filtredUsers.includes(username)) {
//     filtredUsers.push(username);
//   }
// });

// console.log(users);
// console.log(filtredUsers);

// 2 –í–∞—Ä—ñ–∞–Ω—Ç filter() —Ç–∞ indexOf()
// –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const users = ['Andre', 'Lester', 'Andre', 'Lester', 'Louisa', 'Alex'];
// const filtredUsers = users.filter((el, idx, arr) => {
//   return arr.indexOf(el) === idx;
// });

// console.log(users.indexOf('Andre'));

// –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const users = ['Andre', 'Lester', 'Andre', 'Lester', 'Louisa', 'Alex'];
// const filtredUsers = users.filter((username, idx, arr) => {
//   return arr.indexOf(username) === idx;
// });

// console.log(users);
// console.log(filtredUsers);

//? –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–π—Ç–µ –º–∞—Å–∏–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.

// const allUsers = [
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Lida', age: 29 },
// ];
// const filtredUsers = [];

// allUsers.forEach(user => {
//   const currentUser = filtredUsers.find(el => el.firstName === user.firstName);

//   if (currentUser === undefined) {
//     filtredUsers.push(user);
//   }
// });

// console.log(allUsers);
// console.log(filtredUsers);

/*
? –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –≤—ñ–∫–æ–º
? 
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é sortByAge(users), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–± º—î–∫—Ç—ñ–≤ –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é age —ñ —Å–æ—Ä—Ç—É—î —ó—Ö –ø–æ –Ω—å–æ–º—É.
*/

// –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const allUsers = [
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Lida', age: 29 },
// ];

// const sortByAge = users => {
//   return users.toSorted((a, b) => {
//     return a.age - b.age;
//   });
// };

// console.table(sortByAge(allUsers));

// –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const allUsers = [
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Lida', age: 29 },
// ];

// const sortByAge = users => users.toSorted((a, b) => a.age - b.age);

// console.table(sortByAge(allUsers));

/*
? –í–∏—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getAverageAge(users), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ 
? –∑ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—é age —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫.
*/

// –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const allUsers = [
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Lida', age: 29 },
// ];

// const getAverageAge = users => {
//   const totalAge = users.reduce((acc, el, idx, arr) => {
//     return acc + el.age;
//   }, 0);

//   return totalAge / users.length;
// };

// console.log(getAverageAge(allUsers)); // 28

// –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
// const allUsers = [
//   { firstName: 'Herbert', age: 25 },
//   { firstName: 'Todd', age: 30 },
//   { firstName: 'Lida', age: 29 },
// ];

// const getAverageAge = users => {
//   const totalAge = users.reduce((acc, user) => acc + user.age, 0);

//   return totalAge / users.length;
// };

// console.log(getAverageAge(allUsers)); // 28

/*
? –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
? –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ
? –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.
?
? –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
? - getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
? - addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
? - removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
 */

// class Storage {
//   constructor(itemsArr) {
//     // this = {}
//     this.items = itemsArr;
//     // return this
//   }

//   getItems() {
//     return this.items;
//   }

//   addItem(newItem) {
//     this.items.push(newItem);
//   }

//   removeItemWithFilter(item) {
//     this.items = this.items.filter(el => el !== item);
//   }

//   removeItemWithSplice(item) {
//     const idxOfItem = this.items.indexOf(item);

//     if (idxOfItem === -1) {
//       console.log(`${item} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);

//       return;
//     }

//     this.items.splice(idxOfItem, 1);
//   }
// }

// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);

// console.log(storage);

// console.log(storage.getItems()); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem('üçå');
// console.log(storage.getItems()); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItemWithSplice('üçã');
// console.log(storage.getItems()); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

/*
? –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes, —è–∫–∏–π —É–ø—Ä–∞–≤–ª—è—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items.
? –ù–æ—Ç–∞—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority.
? –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, –≤ —è–∫—ñ–π –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
?
? {
? LOW: 'low',
? NORMAL: 'normal',
? HIGH: 'high'
? }
?
? –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).
*/

// class Notes {
//   static Priority = {
//     LOW: 'low',
//     NORMAL: 'normal',
//     HIGH: 'high',
//   };

//   constructor(initalValue) {
//     this.items = initalValue;
//   }

//   addNote(note) {
//     this.items.push(note);
//   }

//   removeNote(noteText) {
//     this.items = this.items.filter(note => note.text !== noteText);
//   }

//   updatePriority(noteText, newPriority) {
//     const note = this.items.find(el => {
//       return el.text.toLowerCase() === noteText.toLowerCase();
//     });

//     if (note === undefined) {
//       console.log(`${noteText} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);

//       return;
//     }

//     note.priority = newPriority;
//   }
// }

// const myNotes = new Notes([]);

// console.log(myNotes);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –Ω–æ—Ç–∞—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes);

// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –Ω–æ—Ç–∞—Ç–∫–∞');
// console.log(myNotes);

// myNotes.updatePriority('–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes);
